{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azure Functions OpenAPI","text":"<p>Welcome to azure-functions-openapi \u2014 a comprehensive library that provides seamless integration of OpenAPI (Swagger) documentation for Python-based Azure Functions with enterprise-grade security, performance, and monitoring capabilities.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":""},{"location":"#core-features","title":"Core Features","text":"<ul> <li><code>@openapi</code> decorator with comprehensive metadata support:</li> <li><code>summary</code>, <code>description</code>, <code>tags</code></li> <li><code>operation_id</code>, <code>route</code>, <code>method</code></li> <li><code>request_model</code>, <code>response_model</code></li> <li><code>parameters</code>, <code>request_body</code>, <code>response</code></li> <li>Automatic generation of:</li> <li><code>/openapi.json</code> - JSON specification</li> <li><code>/openapi.yaml</code> - YAML specification</li> <li><code>/docs</code> - Interactive Swagger UI</li> <li>Pydantic v1 and v2 support with automatic schema generation</li> <li>Type-safe schema generation with full type hints</li> <li>Zero-configuration integration - works out of the box</li> <li>Compatible with Python 3.9+</li> </ul>"},{"location":"#security-performance","title":"\ud83d\udd12 Security &amp; Performance","text":"<ul> <li>Enhanced Security: CSP headers, input validation, XSS protection</li> <li>Performance Caching: In-memory caching with TTL and LRU eviction</li> <li>Error Handling: Standardized error responses with detailed logging</li> <li>Input Sanitization: Automatic sanitization of routes, operation IDs, and parameters</li> </ul>"},{"location":"#monitoring-operations","title":"\ud83d\udcca Monitoring &amp; Operations","text":"<ul> <li>Health Checks: Built-in health monitoring for all components</li> <li>Performance Metrics: Response time tracking, throughput monitoring</li> <li>Request Logging: Detailed request/response logging with statistics</li> <li>Server Information: Comprehensive server info and runtime details</li> </ul>"},{"location":"#developer-experience","title":"\ud83d\udee0\ufe0f Developer Experience","text":"<ul> <li>CLI Tool: Command-line interface for spec generation, validation, and monitoring</li> <li>Comprehensive Testing: 97% test coverage with extensive test suites</li> <li>Documentation: Detailed guides for security, performance, and CLI usage</li> <li>Type Safety: Full type hints and validation throughout</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#1-create-a-function-app-and-register-routes","title":"1. Create a Function App and Register Routes","text":"<p>To expose your Azure Functions with OpenAPI documentation, decorate your function with <code>@openapi</code> and register the documentation endpoints manually.</p> <pre><code># function_app.py\n\nimport json\nimport logging\nimport azure.functions as func\nfrom azure_functions_openapi.decorator import openapi\nfrom azure_functions_openapi.openapi import get_openapi_json, get_openapi_yaml\nfrom azure_functions_openapi.swagger_ui import render_swagger_ui\n\napp = func.FunctionApp()\n\n\n@app.route(route=\"http_trigger\", auth_level=func.AuthLevel.ANONYMOUS)\n@openapi(\n    route=\"/api/http_trigger\",\n    summary=\"HTTP Trigger with name parameter\",\n    description=\"\"\"\nReturns a greeting using the **name** from query or body.\n\nYou can pass the name:\n- via query string: `?name=Azure`\n- via JSON body: `{ \"name\": \"Azure\" }`\n\"\"\",\n    operation_id=\"greetUser\",\n    tags=[\"Example\"],\n    parameters=[\n        {\n            \"name\": \"name\",\n            \"in\": \"query\",\n            \"required\": True,\n            \"schema\": {\"type\": \"string\"},\n            \"description\": \"Name to greet\",\n        }\n    ],\n    response={\n        200: {\n            \"description\": \"Successful response with greeting\",\n            \"content\": {\n                \"application/json\": {\n                    \"examples\": {\n                        \"sample\": {\n                            \"summary\": \"Example greeting\",\n                            \"value\": {\"message\": \"Hello, Azure!\"},\n                        }\n                    }\n                }\n            },\n        },\n        400: {\"description\": \"Invalid request\"},\n    },\n)\ndef http_trigger(req: func.HttpRequest) -&gt; func.HttpResponse:\n    name = req.params.get(\"name\")\n    if not name:\n        try:\n            body = req.get_json()\n            name = body.get(\"name\") if isinstance(body, dict) else None\n        except ValueError:\n            pass\n\n    if not name:\n        return func.HttpResponse(\"Invalid request \u2013 `name` is required\", status_code=400)\n\n    return func.HttpResponse(\n        json.dumps({\"message\": f\"Hello, {name}!\"}),\n        mimetype=\"application/json\",\n        status_code=200,\n    )\n\n\n# OpenAPI documentation routes\n@app.route(route=\"openapi.json\", auth_level=func.AuthLevel.ANONYMOUS)\ndef openapi_spec(req: func.HttpRequest) -&gt; func.HttpResponse:\n    return func.HttpResponse(get_openapi_json(), mimetype=\"application/json\")\n\n\n@app.route(route=\"openapi.yaml\", auth_level=func.AuthLevel.ANONYMOUS)\ndef openapi_yaml_spec(req: func.HttpRequest) -&gt; func.HttpResponse:\n    return func.HttpResponse(get_openapi_yaml(), mimetype=\"application/x-yaml\")\n\n\n@app.route(route=\"docs\", auth_level=func.AuthLevel.ANONYMOUS)\n@app.function_name(name=\"swagger_ui\")\ndef swagger_ui(req: func.HttpRequest) -&gt; func.HttpResponse:\n    return render_swagger_ui()\n</code></pre>"},{"location":"#2-run-the-app","title":"2. Run the App","text":"<p>Use the Azure Functions Core Tools:</p> <pre><code>func start\n</code></pre>"},{"location":"#3-view-the-swagger-api","title":"3. View the Swagger API","text":"<p>Once the app is running, open your browser:</p> <ul> <li>OpenAPI JSON: http://localhost:7071/openapi.json</li> <li>OpenAPI YAML: http://localhost:7071/openapi.yaml</li> <li>Swagger UI: http://localhost:7071/docs</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"#getting-started_1","title":"Getting Started","text":"<ul> <li>Quickstart Guide - Get up and running quickly</li> <li>Installation Guide - Detailed installation instructions</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>Security Guide - Security best practices and features</li> <li>Performance Guide - Performance optimization and monitoring</li> <li>CLI Tool Guide - Command-line interface usage</li> </ul>"},{"location":"#examples-tutorials","title":"Examples &amp; Tutorials","text":"<ul> <li>Hello OpenAPI Example - Basic example</li> <li>Todo CRUD API Example - Advanced example with Pydantic</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Contribution Guide - How to contribute</li> <li>Development Guide - Development setup and guidelines</li> <li>Changelog - Version history and changes</li> </ul>"},{"location":"#about","title":"About","text":"<ul> <li>Repository: GitHub</li> <li>License: MIT</li> </ul>"},{"location":"ARCHITECTURE/","title":"Architecture Guide","text":"<p>This document provides an overview of the azure-functions-openapi library architecture, design decisions, and internal components.</p>"},{"location":"ARCHITECTURE/#system-architecture","title":"\ud83c\udfd7\ufe0f System Architecture","text":""},{"location":"ARCHITECTURE/#high-level-overview","title":"High-Level Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Azure Functions App                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502   @openapi      \u2502  \u2502   Error         \u2502  \u2502   Cache      \u2502 \u2502\n\u2502  \u2502   Decorator     \u2502  \u2502   Handling      \u2502  \u2502   System     \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502           \u2502                     \u2502                   \u2502        \u2502\n\u2502           \u25bc                     \u25bc                   \u25bc        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502              OpenAPI Registry                           \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502           \u2502                                                 \u2502\n\u2502           \u25bc                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502              OpenAPI Generation                         \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502  \u2502  \u2502   JSON      \u2502  \u2502   YAML      \u2502  \u2502   Swagger UI    \u2502 \u2502 \u2502\n\u2502  \u2502  \u2502   Spec      \u2502  \u2502   Spec      \u2502  \u2502   Rendering     \u2502 \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ARCHITECTURE/#core-components","title":"\ud83d\udd27 Core Components","text":""},{"location":"ARCHITECTURE/#1-decorator-system-decoratorpy","title":"1. Decorator System (<code>decorator.py</code>)","text":"<p>The <code>@openapi</code> decorator is the heart of the system:</p> <pre><code>@openapi(\n    summary=\"API endpoint\",\n    description=\"Detailed description\",\n    tags=[\"API\"],\n    request_model=RequestModel,\n    response_model=ResponseModel\n)\ndef my_function(req: func.HttpRequest) -&gt; func.HttpResponse:\n    # Function implementation\n</code></pre> <p>Key Features: - Metadata Collection: Stores OpenAPI metadata in a global registry - Input Validation: Validates and sanitizes all decorator parameters - Error Handling: Comprehensive error handling with detailed logging - Type Safety: Full type hints and validation</p>"},{"location":"ARCHITECTURE/#2-openapi-generation-openapipy","title":"2. OpenAPI Generation (<code>openapi.py</code>)","text":"<p>Converts registered metadata into OpenAPI 3.0 specifications:</p> <pre><code># Generate OpenAPI spec\nspec = generate_openapi_spec(title=\"My API\", version=\"1.0.0\")\n\n# Get JSON/YAML formats\njson_spec = get_openapi_json()\nyaml_spec = get_openapi_yaml()\n</code></pre> <p>Key Features: - Schema Generation: Automatic Pydantic model to JSON Schema conversion - Error Resilience: Graceful handling of schema generation failures - Caching: Built-in caching for performance optimization - Validation: Comprehensive input validation</p>"},{"location":"ARCHITECTURE/#3-swagger-ui-swagger_uipy","title":"3. Swagger UI (<code>swagger_ui.py</code>)","text":"<p>Renders interactive API documentation:</p> <pre><code># Render Swagger UI with enhanced security\nresponse = render_swagger_ui(\n    title=\"API Documentation\",\n    openapi_url=\"/api/openapi.json\",\n    custom_csp=\"custom-csp-policy\"\n)\n</code></pre> <p>Key Features: - Security Headers: CSP, X-Frame-Options, X-XSS-Protection - Input Sanitization: XSS protection and content validation - Customization: Configurable CSP policies and UI options - Monitoring: Request/response interceptors for logging</p>"},{"location":"ARCHITECTURE/#4-error-handling-system-errorspy","title":"4. Error Handling System (<code>errors.py</code>)","text":"<p>Standardized error handling across the library:</p> <pre><code># Custom error types\nclass ValidationError(APIError): ...\nclass NotFoundError(APIError): ...\nclass OpenAPIError(APIError): ...\n\n# Error response creation\nresponse = create_error_response(error, include_stack_trace=False)\n</code></pre> <p>Key Features: - Standardized Format: Consistent error response structure - Error Codes: Categorized error codes for different scenarios - Logging: Comprehensive error logging with context - Request Tracking: Unique request IDs for correlation</p>"},{"location":"ARCHITECTURE/#5-caching-system-cachepy","title":"5. Caching System (<code>cache.py</code>)","text":"<p>High-performance in-memory caching:</p> <pre><code># Cache decorator\n@cached(ttl=300, key_prefix=\"api\")\ndef expensive_operation():\n    return compute_result()\n\n# Cache management\ncache_manager = get_cache_manager()\ncache_manager.set(\"key\", \"value\", ttl=60)\n</code></pre> <p>Key Features: - TTL Support: Time-to-live based expiration - LRU Eviction: Least Recently Used eviction policy - Thread Safety: Safe for concurrent access - Statistics: Cache hit/miss statistics and monitoring</p>"},{"location":"ARCHITECTURE/#6-monitoring-system-monitoringpy","title":"6. Monitoring System (<code>monitoring.py</code>)","text":"<p>Performance monitoring and health checks:</p> <pre><code># Performance monitoring\n@monitor_performance\ndef api_endpoint():\n    return process_request()\n\n# Health checks\nhealth_status = run_health_check(\"openapi_generation\")\n</code></pre> <p>Key Features: - Response Time Tracking: Detailed performance metrics - Health Checks: Automated system health monitoring - Request Logging: Comprehensive request/response logging - Statistics: Throughput and error rate calculations</p>"},{"location":"ARCHITECTURE/#7-server-information-server_infopy","title":"7. Server Information (<code>server_info.py</code>)","text":"<p>Runtime information and system status:</p> <pre><code># Server information\ninfo = get_server_info_dict()\nhealth = get_health_status()\nmetrics = get_metrics()\n</code></pre> <p>Key Features: - Runtime Info: Python version, platform, architecture - Performance Metrics: Uptime, request counts, error rates - Security Status: Security features and configuration - Health Monitoring: System health and component status</p>"},{"location":"ARCHITECTURE/#data-flow","title":"\ud83d\udd04 Data Flow","text":""},{"location":"ARCHITECTURE/#1-function-registration","title":"1. Function Registration","text":"<pre><code>Function Definition \u2192 @openapi Decorator \u2192 Metadata Validation \u2192 Registry Storage\n</code></pre>"},{"location":"ARCHITECTURE/#2-openapi-generation","title":"2. OpenAPI Generation","text":"<pre><code>Registry \u2192 Schema Generation \u2192 Error Handling \u2192 Caching \u2192 JSON/YAML Output\n</code></pre>"},{"location":"ARCHITECTURE/#3-swagger-ui-rendering","title":"3. Swagger UI Rendering","text":"<pre><code>Request \u2192 Security Validation \u2192 HTML Generation \u2192 Security Headers \u2192 Response\n</code></pre>"},{"location":"ARCHITECTURE/#4-error-handling","title":"4. Error Handling","text":"<pre><code>Exception \u2192 Error Classification \u2192 Logging \u2192 Standardized Response \u2192 Client\n</code></pre>"},{"location":"ARCHITECTURE/#security-architecture","title":"\ud83d\udee1\ufe0f Security Architecture","text":""},{"location":"ARCHITECTURE/#input-validation-pipeline","title":"Input Validation Pipeline","text":"<pre><code>User Input \u2192 Sanitization \u2192 Validation \u2192 Processing \u2192 Response\n</code></pre>"},{"location":"ARCHITECTURE/#security-headers","title":"Security Headers","text":"<ul> <li>CSP: Content Security Policy for XSS protection</li> <li>X-Frame-Options: Clickjacking protection</li> <li>X-XSS-Protection: XSS filtering</li> <li>X-Content-Type-Options: MIME type sniffing protection</li> </ul>"},{"location":"ARCHITECTURE/#error-information-disclosure","title":"Error Information Disclosure","text":"<ul> <li>Production: Minimal error information</li> <li>Development: Detailed error information with stack traces</li> <li>Logging: Comprehensive server-side logging</li> </ul>"},{"location":"ARCHITECTURE/#performance-architecture","title":"\ud83d\udcca Performance Architecture","text":""},{"location":"ARCHITECTURE/#caching-strategy","title":"Caching Strategy","text":"<pre><code>Request \u2192 Cache Check \u2192 Cache Hit/Miss \u2192 Response/Computation \u2192 Cache Update\n</code></pre>"},{"location":"ARCHITECTURE/#monitoring-pipeline","title":"Monitoring Pipeline","text":"<pre><code>Request \u2192 Timing \u2192 Logging \u2192 Statistics \u2192 Health Checks \u2192 Alerts\n</code></pre>"},{"location":"ARCHITECTURE/#extension-points","title":"\ud83d\udd27 Extension Points","text":""},{"location":"ARCHITECTURE/#custom-error-handlers","title":"Custom Error Handlers","text":"<pre><code>def custom_error_handler(error: APIError) -&gt; HttpResponse:\n    # Custom error handling logic\n    return create_error_response(error)\n</code></pre>"},{"location":"ARCHITECTURE/#custom-health-checks","title":"Custom Health Checks","text":"<pre><code>def custom_health_check() -&gt; bool:\n    # Custom health check logic\n    return True\n\nregister_health_check(\"custom_check\", custom_health_check)\n</code></pre>"},{"location":"ARCHITECTURE/#custom-cache-strategies","title":"Custom Cache Strategies","text":"<pre><code>class CustomCacheManager(CacheManager):\n    def get(self, key: str) -&gt; Optional[Any]:\n        # Custom cache retrieval logic\n        return super().get(key)\n</code></pre>"},{"location":"ARCHITECTURE/#deployment-architecture","title":"\ud83d\ude80 Deployment Architecture","text":""},{"location":"ARCHITECTURE/#azure-functions-integration","title":"Azure Functions Integration","text":"<pre><code>Azure Functions Runtime \u2192 Function App \u2192 OpenAPI Routes \u2192 Documentation\n</code></pre>"},{"location":"ARCHITECTURE/#cli-tool-integration","title":"CLI Tool Integration","text":"<pre><code>CLI Commands \u2192 Library Functions \u2192 Azure Functions \u2192 OpenAPI Generation\n</code></pre>"},{"location":"ARCHITECTURE/#scalability-considerations","title":"\ud83d\udcc8 Scalability Considerations","text":""},{"location":"ARCHITECTURE/#memory-management","title":"Memory Management","text":"<ul> <li>Cache Limits: Configurable cache size limits</li> <li>LRU Eviction: Automatic cleanup of unused entries</li> <li>TTL Expiration: Time-based cache invalidation</li> </ul>"},{"location":"ARCHITECTURE/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Lazy Loading: On-demand schema generation</li> <li>Caching: Aggressive caching of expensive operations</li> <li>Parallel Processing: Concurrent request handling</li> </ul>"},{"location":"ARCHITECTURE/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<ul> <li>Health Checks: Automated system health monitoring</li> <li>Performance Metrics: Real-time performance tracking</li> <li>Error Tracking: Comprehensive error logging and analysis</li> </ul>"},{"location":"ARCHITECTURE/#future-architecture-considerations","title":"\ud83d\udd2e Future Architecture Considerations","text":""},{"location":"ARCHITECTURE/#planned-enhancements","title":"Planned Enhancements","text":"<ol> <li>Distributed Caching: Redis/Memcached integration</li> <li>Advanced Monitoring: Prometheus/Grafana integration</li> <li>API Gateway Integration: Azure API Management support</li> <li>Authentication: OAuth2/OpenID Connect support</li> <li>Rate Limiting: Built-in rate limiting capabilities</li> </ol>"},{"location":"ARCHITECTURE/#extension-architecture","title":"Extension Architecture","text":"<p>The library is designed with extensibility in mind:</p> <ul> <li>Plugin System: Custom decorators and processors</li> <li>Middleware Support: Request/response middleware</li> <li>Custom Validators: Extensible validation framework</li> <li>Event System: Hooks for custom processing</li> </ul>"},{"location":"CLI/","title":"CLI Tool Guide","text":"<p>The Azure Functions OpenAPI CLI tool provides command-line access to various features of the library.</p>"},{"location":"CLI/#installation","title":"Installation","text":"<p>The CLI tool is automatically installed when you install the package:</p> <pre><code>pip install azure-functions-openapi\n</code></pre>"},{"location":"CLI/#usage","title":"Usage","text":""},{"location":"CLI/#basic-commands","title":"Basic Commands","text":"<pre><code># Show help\nazure-functions-openapi --help\n\n# Show command-specific help\nazure-functions-openapi generate --help\n</code></pre>"},{"location":"CLI/#generate-openapi-specification","title":"Generate OpenAPI Specification","text":"<p>Generate an OpenAPI specification:</p> <pre><code># Generate JSON specification\nazure-functions-openapi generate --title \"My API\" --version \"1.0.0\"\n\n# Generate YAML specification\nazure-functions-openapi generate --format yaml --title \"My API\" --version \"1.0.0\"\n\n# Save to file\nazure-functions-openapi generate --output openapi.json --title \"My API\" --version \"1.0.0\"\n\n# Pretty print output\nazure-functions-openapi generate --pretty --title \"My API\" --version \"1.0.0\"\n</code></pre>"},{"location":"CLI/#generate-command-options","title":"Generate Command Options","text":"<ul> <li><code>--title</code>: API title (default: \"API\")</li> <li><code>--version</code>: API version (default: \"1.0.0\")</li> <li><code>--output, -o</code>: Output file path</li> <li><code>--format, -f</code>: Output format (json or yaml, default: json)</li> <li><code>--pretty, -p</code>: Pretty print output</li> </ul>"},{"location":"CLI/#server-information","title":"Server Information","text":"<p>Get server information:</p> <pre><code># Get server info as JSON\nazure-functions-openapi info\n\n# Get server info as YAML\nazure-functions-openapi info --format yaml\n\n# Save to file\nazure-functions-openapi info --output server-info.json\n</code></pre>"},{"location":"CLI/#server-information-includes","title":"Server Information Includes","text":"<ul> <li>Server details (name, version, environment)</li> <li>Runtime information (Python version, platform)</li> <li>Uptime statistics</li> <li>Request/error statistics</li> <li>Security features status</li> <li>Available features</li> </ul>"},{"location":"CLI/#health-status","title":"Health Status","text":"<p>Check health status:</p> <pre><code># Check health status\nazure-functions-openapi health\n\n# Save health status to file\nazure-functions-openapi health --output health.json\n\n# Get health status as YAML\nazure-functions-openapi health --format yaml\n</code></pre>"},{"location":"CLI/#health-status-information","title":"Health Status Information","text":"<ul> <li>Overall health status (healthy/unhealthy/starting/error)</li> <li>Individual health checks</li> <li>Timestamp</li> <li>Uptime</li> <li>Error rate</li> <li>Request statistics</li> </ul>"},{"location":"CLI/#performance-metrics","title":"Performance Metrics","text":"<p>Get performance metrics:</p> <pre><code># Get metrics\nazure-functions-openapi metrics\n\n# Save metrics to file\nazure-functions-openapi metrics --output metrics.json\n\n# Get metrics as YAML\nazure-functions-openapi metrics --format yaml\n</code></pre>"},{"location":"CLI/#metrics-include","title":"Metrics Include","text":"<ul> <li>Request statistics (total, per second, per minute, per hour)</li> <li>Error statistics (total, rate, per second)</li> <li>Uptime information</li> <li>Performance metrics (response time, memory usage)</li> </ul>"},{"location":"CLI/#validate-openapi-specification","title":"Validate OpenAPI Specification","text":"<p>Validate an OpenAPI specification file:</p> <pre><code># Validate JSON file\nazure-functions-openapi validate openapi.json\n\n# Validate YAML file\nazure-functions-openapi validate openapi.yaml\n\n# Specify format explicitly\nazure-functions-openapi validate spec.json --format json\n</code></pre>"},{"location":"CLI/#validation-checks","title":"Validation Checks","text":"<ul> <li>Required fields (openapi, info, paths)</li> <li>OpenAPI version compatibility</li> <li>Path structure validation</li> <li>HTTP method validation</li> <li>Parameter structure validation</li> </ul>"},{"location":"CLI/#examples","title":"Examples","text":""},{"location":"CLI/#generate-api-documentation","title":"Generate API Documentation","text":"<pre><code># Generate comprehensive API documentation\nazure-functions-openapi generate \\\n  --title \"User Management API\" \\\n  --version \"2.1.0\" \\\n  --output docs/api-spec.json \\\n  --format json \\\n  --pretty\n</code></pre>"},{"location":"CLI/#health-check-script","title":"Health Check Script","text":"<pre><code>#!/bin/bash\n# health-check.sh\n\n# Check health status\nif azure-functions-openapi health --format json | jq -r '.status' | grep -q \"healthy\"; then\n    echo \"\u2705 Service is healthy\"\n    exit 0\nelse\n    echo \"\u274c Service is unhealthy\"\n    exit 1\nfi\n</code></pre>"},{"location":"CLI/#monitoring-script","title":"Monitoring Script","text":"<pre><code>#!/bin/bash\n# monitor.sh\n\n# Get metrics and save to file with timestamp\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nazure-functions-openapi metrics --output \"metrics_${TIMESTAMP}.json\"\n\n# Check if error rate is too high\nERROR_RATE=$(azure-functions-openapi metrics --format json | jq -r '.errors.rate')\nif (( $(echo \"$ERROR_RATE &gt; 5\" | bc -l) )); then\n    echo \"\u26a0\ufe0f  High error rate: ${ERROR_RATE}%\"\nfi\n</code></pre>"},{"location":"CLI/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/api-validation.yml\nname: API Validation\n\non: [push, pull_request]\n\njobs:\n  validate-api:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n      - name: Install dependencies\n        run: |\n          pip install azure-functions-openapi\n      - name: Generate OpenAPI spec\n        run: |\n          azure-functions-openapi generate --output openapi.json\n      - name: Validate OpenAPI spec\n        run: |\n          azure-functions-openapi validate openapi.json\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: openapi-spec\n          path: openapi.json\n</code></pre>"},{"location":"CLI/#exit-codes","title":"Exit Codes","text":"<p>The CLI tool uses standard exit codes:</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: General error</li> <li><code>2</code>: Invalid arguments</li> <li><code>3</code>: File not found</li> <li><code>4</code>: Validation error</li> </ul>"},{"location":"CLI/#error-handling","title":"Error Handling","text":"<p>The CLI tool provides clear error messages:</p> <pre><code># Invalid command\n$ azure-functions-openapi invalid-command\nError: Unknown command: invalid-command\n\n# File not found\n$ azure-functions-openapi validate nonexistent.json\nError: File not found: nonexistent.json\n\n# Validation error\n$ azure-functions-openapi validate invalid.json\nValidation errors found:\n  - Missing required field: openapi\n  - Missing required field: info\n</code></pre>"},{"location":"CLI/#configuration","title":"Configuration","text":""},{"location":"CLI/#environment-variables","title":"Environment Variables","text":"<p>You can configure the CLI tool using environment variables:</p> <pre><code># Set default output format\nexport AZURE_FUNCTIONS_OPENAPI_DEFAULT_FORMAT=yaml\n\n# Set default output directory\nexport AZURE_FUNCTIONS_OPENAPI_OUTPUT_DIR=./docs\n</code></pre>"},{"location":"CLI/#configuration-file","title":"Configuration File","text":"<p>Create a configuration file at <code>~/.azure-functions-openapi/config.json</code>:</p> <pre><code>{\n  \"default_format\": \"json\",\n  \"default_output_dir\": \"./docs\",\n  \"pretty_print\": true,\n  \"cache_ttl\": 300\n}\n</code></pre>"},{"location":"CLI/#integration-with-other-tools","title":"Integration with Other Tools","text":""},{"location":"CLI/#jq-integration","title":"jq Integration","text":"<p>Use jq to process JSON output:</p> <pre><code># Get only the status from health check\nazure-functions-openapi health | jq -r '.status'\n\n# Get error rate from metrics\nazure-functions-openapi metrics | jq -r '.errors.rate'\n\n# Filter server info\nazure-functions-openapi info | jq '.server'\n</code></pre>"},{"location":"CLI/#curl-integration","title":"curl Integration","text":"<p>Use curl to send generated specs to other services:</p> <pre><code># Generate spec and send to API gateway\nazure-functions-openapi generate --format json | \\\n  curl -X POST -H \"Content-Type: application/json\" \\\n  -d @- https://api-gateway.example.com/specs\n</code></pre>"},{"location":"CLI/#docker-integration","title":"Docker Integration","text":"<p>Use the CLI tool in Docker containers:</p> <pre><code>FROM python:3.9-slim\n\n# Install the package\nRUN pip install azure-functions-openapi\n\n# Copy your application\nCOPY . /app\nWORKDIR /app\n\n# Use the CLI tool\nCMD [\"azure-functions-openapi\", \"generate\", \"--output\", \"/app/openapi.json\"]\n</code></pre>"},{"location":"CLI/#troubleshooting","title":"Troubleshooting","text":""},{"location":"CLI/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Command not found <pre><code># Make sure the package is installed\npip install azure-functions-openapi\n\n# Check if the command is in PATH\nwhich azure-functions-openapi\n</code></pre></p> </li> <li> <p>Permission denied <pre><code># Make sure you have write permissions for output files\nchmod 755 /path/to/output/directory\n</code></pre></p> </li> <li> <p>Invalid JSON/YAML <pre><code># Validate your input files\nazure-functions-openapi validate your-file.json\n</code></pre></p> </li> </ol>"},{"location":"CLI/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for more verbose output:</p> <pre><code># Set debug environment variable\nexport AZURE_FUNCTIONS_OPENAPI_DEBUG=1\n\n# Run command with debug output\nazure-functions-openapi generate --title \"Debug API\"\n</code></pre>"},{"location":"CLI/#log-files","title":"Log Files","text":"<p>The CLI tool logs to: - Console output (stdout/stderr) - System logs (when available) - Debug files (when debug mode is enabled)</p>"},{"location":"MILESTONES/","title":"azure-functions-openapi \u2013 Development Checklist","text":""},{"location":"MILESTONES/#m1-project-setup","title":"\u2705 M1. Project Setup","text":"<ul> <li>[x] Scaffold the project with <code>src/</code>, <code>tests/</code>, and <code>examples/</code> directories</li> <li>[x] Configure <code>pyproject.toml</code>, <code>Makefile</code>, <code>.editorconfig</code>, <code>.gitignore</code></li> <li>[x] Set Python version to &gt;=3.8</li> <li>[x] Use <code>hatch</code> for versioning</li> <li>[x] Set up <code>uv</code> for editable installs</li> <li>[x] Add <code>.pre-commit-config.yaml</code> and essential hooks</li> </ul>"},{"location":"MILESTONES/#m2-core-mvp-features-v020","title":"\u2705 M2. Core MVP Features (v0.2.0)","text":"<ul> <li>[x] Implement <code>@openapi</code> decorator: support <code>summary</code>, <code>description</code>, <code>response</code></li> <li>[x] Build central registry for function metadata</li> <li>[x] Provide <code>/openapi.json</code> route to serve OpenAPI spec</li> <li>[x] Serve Swagger UI at <code>/docs</code> (<code>/swagger</code>)</li> <li>[x] Create example Azure Function with decorated route</li> </ul>"},{"location":"MILESTONES/#m3-extended-features-v030","title":"\u2705 M3. Extended Features (v0.3.0)","text":"<ul> <li>[x] Automatically infer HTTP method and route from Azure trigger</li> <li>[x] Add support for request parameters: query, path, header</li> <li>[x] Enable <code>requestBody</code> support with schema validation</li> <li>[x] Support JSON schema for responses (including <code>examples</code>)</li> <li>[x] Integrate with <code>pydantic</code> or type annotations</li> <li>[x] Allow custom tags and <code>operationId</code></li> <li>[x] Support Markdown in descriptions</li> <li>[x] Expand parameter location support (<code>cookie</code> params)</li> <li>[x] Provide <code>/openapi.yaml</code> endpoint for YAML format</li> </ul>"},{"location":"MILESTONES/#m4-quality-ci-v040","title":"\u2705 M4. Quality &amp; CI (v0.4.0)","text":"<ul> <li>[x] Add Makefile targets: <code>format</code>, <code>lint</code>, <code>typecheck</code>, <code>test</code>, <code>check</code></li> <li>[x] Integrate <code>pre-commit</code> hooks (<code>black</code>, <code>ruff</code>, <code>mypy</code>, etc.)</li> <li>[x] Write unit tests with <code>pytest</code> for decorators and OpenAPI generator</li> <li>[x] Add GitHub Actions CI pipeline</li> <li>[x] Generate coverage report and add Codecov badge</li> </ul>"},{"location":"MILESTONES/#m5-release-documentation","title":"\u2b1c M5. Release &amp; Documentation","text":"<ul> <li>[x] Build package with <code>hatch build</code></li> <li>[x] Provide usage examples and instructions in <code>README.md</code></li> <li>[x] Create <code>docs/</code> folder with <code>index.md</code>, <code>usage.md</code>, <code>contributing.md</code></li> <li>[x] Add <code>mkdocs.yml</code> to structure documentation site</li> <li>[ ] Add Swagger UI screenshot or visual preview to docs</li> <li>[ ] Automate changelog generation with <code>git-changelog</code></li> <li>[ ] Publish first release to PyPI</li> <li>[ ] Improve Swagger UI rendering (rich <code>examples</code>, schema previews)</li> <li>[ ] (Optional) Host demo site using GitHub Pages or Azure Static Web App</li> </ul>"},{"location":"MILESTONES/#m6-openapi-31-compatibility-v040","title":"\u2b1c M6. OpenAPI 3.1 &amp; Compatibility (v0.4.0+)","text":"<ul> <li>[ ] Support OpenAPI 3.1 (<code>$schema</code>, JSON Schema 2020-12 compatibility)</li> <li>[ ] Add OpenAPI version toggle (3.0 vs. 3.1 support via argument or config)</li> </ul>"},{"location":"PERFORMANCE/","title":"Performance Guide","text":"<p>This document covers performance optimization features and best practices for Azure Functions OpenAPI.</p>"},{"location":"PERFORMANCE/#performance-features","title":"Performance Features","text":""},{"location":"PERFORMANCE/#caching-system","title":"Caching System","text":"<p>The library includes a comprehensive caching system to improve performance:</p>"},{"location":"PERFORMANCE/#in-memory-cache","title":"In-Memory Cache","text":"<ul> <li>TTL-based expiration: Automatic cleanup of expired entries</li> <li>LRU eviction: Least Recently Used eviction when cache is full</li> <li>Thread-safe operations: Safe for concurrent access</li> <li>Configurable TTL: Default 5 minutes, customizable per operation</li> </ul>"},{"location":"PERFORMANCE/#cached-operations","title":"Cached Operations","text":"<p>The following operations are automatically cached:</p> <ul> <li>OpenAPI spec generation: 10-minute TTL</li> <li>JSON serialization: 5-minute TTL</li> <li>YAML serialization: 5-minute TTL</li> </ul>"},{"location":"PERFORMANCE/#cache-management","title":"Cache Management","text":"<pre><code>from azure_functions_openapi.cache import (\n    get_cache_manager,\n    invalidate_cache,\n    clear_all_cache,\n    get_cache_stats\n)\n\n# Get cache statistics\nstats = get_cache_stats()\nprint(f\"Active entries: {stats['active_entries']}\")\n\n# Invalidate specific cache entries\ninvalidated = invalidate_cache(\"openapi_spec\")\n\n# Clear all cache\nclear_all_cache()\n</code></pre>"},{"location":"PERFORMANCE/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"PERFORMANCE/#response-time-tracking","title":"Response Time Tracking","text":"<p>The library tracks response times for all operations:</p> <pre><code>from azure_functions_openapi.monitoring import get_performance_monitor\n\nmonitor = get_performance_monitor()\nstats = monitor.get_response_time_stats()\n\nprint(f\"Average response time: {stats['avg']:.3f}s\")\nprint(f\"95th percentile: {stats['p95']:.3f}s\")\n</code></pre>"},{"location":"PERFORMANCE/#throughput-metrics","title":"Throughput Metrics","text":"<p>Monitor requests per second, minute, and hour:</p> <pre><code>throughput = monitor.get_throughput_stats()\nprint(f\"Requests per second: {throughput['requests_per_second']:.2f}\")\n</code></pre>"},{"location":"PERFORMANCE/#request-logging","title":"Request Logging","text":"<p>Track individual requests with detailed metrics:</p> <pre><code>from azure_functions_openapi.monitoring import log_request\n\nlog_request(\n    method=\"GET\",\n    path=\"/api/users\",\n    status_code=200,\n    response_time=0.150,\n    user_agent=\"Mozilla/5.0...\",\n    ip_address=\"192.168.1.1\"\n)\n</code></pre>"},{"location":"PERFORMANCE/#performance-decorators","title":"Performance Decorators","text":"<p>Use the <code>@monitor_performance</code> decorator to automatically track function performance:</p> <pre><code>from azure_functions_openapi.monitoring import monitor_performance\n\n@monitor_performance\ndef my_api_function():\n    # Your function code\n    return {\"result\": \"success\"}\n</code></pre>"},{"location":"PERFORMANCE/#performance-best-practices","title":"Performance Best Practices","text":""},{"location":"PERFORMANCE/#openapi-generation","title":"OpenAPI Generation","text":"<ol> <li>Use caching: The library automatically caches generated specs</li> <li>Minimize changes: Avoid frequent changes to function metadata</li> <li>Batch operations: Group related operations together</li> <li>Optimize models: Use efficient Pydantic models</li> </ol>"},{"location":"PERFORMANCE/#memory-management","title":"Memory Management","text":"<ol> <li>Monitor cache size: Use <code>get_cache_stats()</code> to monitor memory usage</li> <li>Clear cache periodically: Use <code>clear_all_cache()</code> in maintenance windows</li> <li>Limit cache entries: The cache automatically limits entries to prevent memory issues</li> </ol>"},{"location":"PERFORMANCE/#response-optimization","title":"Response Optimization","text":"<ol> <li>Minimize data: Only include necessary information in responses</li> <li>Use compression: Enable gzip compression in Azure Functions</li> <li>Optimize serialization: Use efficient JSON serialization</li> <li>Cache responses: Cache frequently accessed data</li> </ol>"},{"location":"PERFORMANCE/#database-and-external-services","title":"Database and External Services","text":"<ol> <li>Connection pooling: Use connection pooling for database connections</li> <li>Async operations: Use async/await for I/O operations</li> <li>Timeout configuration: Set appropriate timeouts</li> <li>Retry logic: Implement exponential backoff for retries</li> </ol>"},{"location":"PERFORMANCE/#performance-configuration","title":"Performance Configuration","text":""},{"location":"PERFORMANCE/#cache-configuration","title":"Cache Configuration","text":"<p>Configure cache behavior:</p> <pre><code>from azure_functions_openapi.cache import get_cache_manager\n\ncache = get_cache_manager()\ncache.default_ttl = 600  # 10 minutes\n</code></pre>"},{"location":"PERFORMANCE/#monitoring-configuration","title":"Monitoring Configuration","text":"<p>Configure monitoring settings:</p> <pre><code>from azure_functions_openapi.monitoring import get_performance_monitor\n\nmonitor = get_performance_monitor()\nmonitor._max_response_times = 2000  # Keep more response times\n</code></pre>"},{"location":"PERFORMANCE/#logging-configuration","title":"Logging Configuration","text":"<p>Configure logging for performance monitoring:</p> <pre><code>import logging\n\n# Set up performance logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger('azure_functions_openapi.monitoring')\nlogger.setLevel(logging.DEBUG)\n</code></pre>"},{"location":"PERFORMANCE/#performance-metrics","title":"Performance Metrics","text":""},{"location":"PERFORMANCE/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<ol> <li>Response Time</li> <li>Average response time</li> <li>95th percentile response time</li> <li>99th percentile response time</li> <li> <p>Maximum response time</p> </li> <li> <p>Throughput</p> </li> <li>Requests per second</li> <li>Requests per minute</li> <li>Requests per hour</li> <li> <p>Total requests</p> </li> <li> <p>Error Rate</p> </li> <li>Error percentage</li> <li>Error count</li> <li> <p>Error types</p> </li> <li> <p>Cache Performance</p> </li> <li>Cache hit rate</li> <li>Cache miss rate</li> <li>Cache size</li> <li>Cache evictions</li> </ol>"},{"location":"PERFORMANCE/#performance-targets","title":"Performance Targets","text":"<p>Recommended performance targets:</p> <ul> <li>Response Time: &lt; 100ms for cached operations</li> <li>Throughput: &gt; 1000 requests/second</li> <li>Error Rate: &lt; 1%</li> <li>Cache Hit Rate: &gt; 90%</li> </ul>"},{"location":"PERFORMANCE/#performance-troubleshooting","title":"Performance Troubleshooting","text":""},{"location":"PERFORMANCE/#common-issues","title":"Common Issues","text":"<ol> <li>Slow Response Times</li> <li>Check cache hit rates</li> <li>Monitor memory usage</li> <li>Review function complexity</li> <li> <p>Check external service latency</p> </li> <li> <p>High Memory Usage</p> </li> <li>Monitor cache size</li> <li>Check for memory leaks</li> <li>Review data structures</li> <li> <p>Clear cache if needed</p> </li> <li> <p>High Error Rates</p> </li> <li>Check input validation</li> <li>Review error handling</li> <li>Monitor external services</li> <li>Check resource limits</li> </ol>"},{"location":"PERFORMANCE/#performance-profiling","title":"Performance Profiling","text":"<p>Use Python profiling tools:</p> <pre><code>import cProfile\nimport pstats\n\n# Profile your function\nprofiler = cProfile.Profile()\nprofiler.enable()\n\n# Your code here\ngenerate_openapi_spec()\n\nprofiler.disable()\nstats = pstats.Stats(profiler)\nstats.sort_stats('cumulative')\nstats.print_stats(10)\n</code></pre>"},{"location":"PERFORMANCE/#memory-profiling","title":"Memory Profiling","text":"<p>Use memory profiling tools:</p> <pre><code>from memory_profiler import profile\n\n@profile\ndef my_function():\n    # Your code here\n    pass\n</code></pre>"},{"location":"PERFORMANCE/#performance-testing","title":"Performance Testing","text":""},{"location":"PERFORMANCE/#load-testing","title":"Load Testing","text":"<p>Use tools like Apache Bench or wrk for load testing:</p> <pre><code># Test with 100 concurrent users for 30 seconds\nab -n 1000 -c 100 -t 30 http://localhost:7071/api/openapi.json\n</code></pre>"},{"location":"PERFORMANCE/#stress-testing","title":"Stress Testing","text":"<p>Test system limits:</p> <pre><code># Test with high concurrency\nab -n 10000 -c 500 http://localhost:7071/api/openapi.json\n</code></pre>"},{"location":"PERFORMANCE/#monitoring-during-tests","title":"Monitoring During Tests","text":"<p>Monitor key metrics during testing:</p> <pre><code>from azure_functions_openapi.monitoring import get_performance_monitor\n\nmonitor = get_performance_monitor()\n\n# Before test\ninitial_stats = monitor.get_response_time_stats()\n\n# Run your test\n# ...\n\n# After test\nfinal_stats = monitor.get_response_time_stats()\nprint(f\"Performance change: {final_stats['avg'] - initial_stats['avg']:.3f}s\")\n</code></pre>"},{"location":"PERFORMANCE/#performance-optimization-checklist","title":"Performance Optimization Checklist","text":"<ul> <li>[ ] Enable caching for all operations</li> <li>[ ] Monitor response times and throughput</li> <li>[ ] Optimize Pydantic models</li> <li>[ ] Use efficient serialization</li> <li>[ ] Implement proper error handling</li> <li>[ ] Monitor memory usage</li> <li>[ ] Configure appropriate timeouts</li> <li>[ ] Use connection pooling</li> <li>[ ] Implement retry logic</li> <li>[ ] Regular performance testing</li> <li>[ ] Monitor cache hit rates</li> <li>[ ] Clear cache when needed</li> <li>[ ] Use async operations where appropriate</li> <li>[ ] Optimize database queries</li> <li>[ ] Monitor external service latency</li> </ul>"},{"location":"SECURITY/","title":"Security Guide","text":"<p>This document outlines the security features and best practices implemented in Azure Functions OpenAPI.</p>"},{"location":"SECURITY/#security-features","title":"Security Features","text":""},{"location":"SECURITY/#content-security-policy-csp","title":"Content Security Policy (CSP)","text":"<p>The Swagger UI is protected with a comprehensive Content Security Policy that:</p> <ul> <li>Restricts script sources to <code>'self'</code> and <code>https://cdn.jsdelivr.net</code></li> <li>Prevents inline script execution except where necessary</li> <li>Blocks external validators for security</li> <li>Prevents frame embedding with <code>frame-ancestors 'none'</code></li> <li>Restricts form actions to same origin</li> </ul>"},{"location":"SECURITY/#security-headers","title":"Security Headers","text":"<p>All responses include the following security headers:</p> <ul> <li><code>X-Content-Type-Options: nosniff</code> - Prevents MIME type sniffing</li> <li><code>X-Frame-Options: DENY</code> - Prevents clickjacking attacks</li> <li><code>X-XSS-Protection: 1; mode=block</code> - Enables XSS filtering</li> <li><code>Referrer-Policy: strict-origin-when-cross-origin</code> - Controls referrer information</li> <li><code>Strict-Transport-Security</code> - Enforces HTTPS (when applicable)</li> </ul>"},{"location":"SECURITY/#input-validation-and-sanitization","title":"Input Validation and Sanitization","text":""},{"location":"SECURITY/#route-path-validation","title":"Route Path Validation","text":"<p>Route paths are validated to prevent: - Path traversal attacks (<code>../</code>) - XSS attempts (<code>&lt;script&gt;</code>) - JavaScript injection (<code>javascript:</code>) - Data URI injection (<code>data:</code>)</p> <p>Valid route patterns: - Must start with <code>/</code> - Can contain alphanumeric characters, hyphens, underscores, slashes - Can contain curly braces for path parameters (<code>{id}</code>) - Can contain spaces</p>"},{"location":"SECURITY/#operation-id-sanitization","title":"Operation ID Sanitization","text":"<p>Operation IDs are sanitized to: - Remove dangerous characters - Keep only alphanumeric characters and underscores - Ensure they start with a letter (prefixed with <code>op_</code> if needed)</p>"},{"location":"SECURITY/#parameter-validation","title":"Parameter Validation","text":"<p>Parameters are validated to ensure: - Required fields (<code>name</code>, <code>in</code>) are present - Each parameter is a valid dictionary - Parameter structure follows OpenAPI specification</p>"},{"location":"SECURITY/#tag-validation","title":"Tag Validation","text":"<p>Tags are validated to: - Ensure they are strings - Remove whitespace - Prevent empty tags</p>"},{"location":"SECURITY/#error-handling","title":"Error Handling","text":""},{"location":"SECURITY/#standardized-error-responses","title":"Standardized Error Responses","text":"<p>All errors follow a consistent format:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Human-readable error message\",\n    \"status_code\": 400,\n    \"details\": {\n      \"field\": \"additional context\"\n    }\n  },\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"request_id\": \"unique-request-id\"\n}\n</code></pre>"},{"location":"SECURITY/#error-logging","title":"Error Logging","text":"<p>All errors are logged with: - Error code and message - Request context - Stack traces (in development mode) - Request IDs for correlation</p>"},{"location":"SECURITY/#caching-security","title":"Caching Security","text":"<p>The caching system includes: - Input validation for cache keys - TTL-based expiration - Memory-safe operations - No sensitive data caching</p>"},{"location":"SECURITY/#security-best-practices","title":"Security Best Practices","text":""},{"location":"SECURITY/#for-developers","title":"For Developers","text":"<ol> <li>Always validate input: Use the built-in validation functions</li> <li>Sanitize user data: Let the library handle sanitization</li> <li>Use HTTPS: Ensure your Azure Functions use HTTPS</li> <li>Monitor logs: Check error logs for security issues</li> <li>Keep dependencies updated: Regularly update the library</li> </ol>"},{"location":"SECURITY/#for-deployment","title":"For Deployment","text":"<ol> <li>Environment Variables: Use secure environment variables for configuration</li> <li>Network Security: Configure proper network security groups</li> <li>Access Control: Implement proper authentication and authorization</li> <li>Monitoring: Set up security monitoring and alerting</li> <li>Regular Updates: Keep the runtime and dependencies updated</li> </ol>"},{"location":"SECURITY/#for-api-design","title":"For API Design","text":"<ol> <li>Minimal Information: Don't expose sensitive information in OpenAPI specs</li> <li>Proper Authentication: Document authentication requirements</li> <li>Rate Limiting: Implement rate limiting for your APIs</li> <li>Input Validation: Validate all inputs at the application level</li> <li>Error Messages: Don't expose internal details in error messages</li> </ol>"},{"location":"SECURITY/#security-configuration","title":"Security Configuration","text":""},{"location":"SECURITY/#custom-csp-policy","title":"Custom CSP Policy","text":"<p>You can provide a custom CSP policy:</p> <pre><code>from azure_functions_openapi.swagger_ui import render_swagger_ui\n\ncustom_csp = \"default-src 'self'; script-src 'self' 'unsafe-inline'\"\nresponse = render_swagger_ui(custom_csp=custom_csp)\n</code></pre>"},{"location":"SECURITY/#security-headers_1","title":"Security Headers","text":"<p>Security headers are automatically added to all responses. You can customize them by modifying the <code>render_swagger_ui</code> function.</p>"},{"location":"SECURITY/#error-handling_1","title":"Error Handling","text":"<p>Customize error handling by:</p> <pre><code>from azure_functions_openapi.errors import create_error_response, APIError\n\ntry:\n    # Your code here\n    pass\nexcept APIError as e:\n    response = create_error_response(e, include_stack_trace=False)\n</code></pre>"},{"location":"SECURITY/#security-monitoring","title":"Security Monitoring","text":""},{"location":"SECURITY/#health-checks","title":"Health Checks","text":"<p>The library includes built-in health checks for: - OpenAPI generation - Swagger UI rendering - Cache functionality</p>"},{"location":"SECURITY/#metrics","title":"Metrics","text":"<p>Monitor security-related metrics: - Error rates - Response times - Request patterns - Failed validations</p>"},{"location":"SECURITY/#logging","title":"Logging","text":"<p>Security events are logged with appropriate levels: - <code>INFO</code>: Normal operations - <code>WARNING</code>: Security warnings (e.g., invalid input) - <code>ERROR</code>: Security errors (e.g., validation failures)</p>"},{"location":"SECURITY/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>If you discover a security vulnerability, please:</p> <ol> <li>Do not create a public issue</li> <li>Email security concerns to: security@example.com</li> <li>Include detailed information about the vulnerability</li> <li>Allow time for the issue to be addressed before disclosure</li> </ol>"},{"location":"SECURITY/#security-updates","title":"Security Updates","text":"<p>Security updates are released as: - Patch versions (e.g., 1.0.1) for critical security fixes - Minor versions (e.g., 1.1.0) for security improvements - Major versions (e.g., 2.0.0) for breaking security changes</p> <p>Always update to the latest version to ensure you have the latest security fixes.</p>"},{"location":"TROUBLESHOOTING/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and resolve common issues with azure-functions-openapi.</p>"},{"location":"TROUBLESHOOTING/#common-issues","title":"\ud83d\udea8 Common Issues","text":""},{"location":"TROUBLESHOOTING/#1-import-errors","title":"1. Import Errors","text":""},{"location":"TROUBLESHOOTING/#problem-modulenotfounderror","title":"Problem: ModuleNotFoundError","text":"<pre><code>ModuleNotFoundError: No module named 'azure_functions_openapi'\n</code></pre> <p>Solutions: 1. Install the package: <pre><code>pip install azure-functions-openapi\n</code></pre></p> <ol> <li> <p>Check virtual environment: <pre><code># Activate your virtual environment\nsource .venv/bin/activate  # Linux/Mac\n# or\n.venv\\Scripts\\activate     # Windows\n\n# Install in the correct environment\npip install azure-functions-openapi\n</code></pre></p> </li> <li> <p>Verify installation: <pre><code>pip list | grep azure-functions-openapi\npython -c \"import azure_functions_openapi; print('OK')\"\n</code></pre></p> </li> </ol>"},{"location":"TROUBLESHOOTING/#problem-import-from-wrong-module","title":"Problem: Import from wrong module","text":"<pre><code># \u274c Wrong\nfrom azure_functions_doctor import openapi\n\n# \u2705 Correct\nfrom azure_functions_openapi.decorator import openapi\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-decorator-issues","title":"2. Decorator Issues","text":""},{"location":"TROUBLESHOOTING/#problem-decorator-not-working","title":"Problem: Decorator not working","text":"<pre><code>@openapi(summary=\"Test\")\ndef my_function(req):\n    return func.HttpResponse(\"Hello\")\n</code></pre> <p>Solutions: 1. Check decorator order: <pre><code># \u2705 Correct order\n@app.route(route=\"test\", auth_level=func.AuthLevel.ANONYMOUS)\n@openapi(summary=\"Test\")\ndef my_function(req):\n    return func.HttpResponse(\"Hello\")\n</code></pre></p> <ol> <li>Verify function registration: <pre><code>from azure_functions_openapi.decorator import get_openapi_registry\n\nregistry = get_openapi_registry()\nprint(f\"Registered functions: {list(registry.keys())}\")\n</code></pre></li> </ol>"},{"location":"TROUBLESHOOTING/#problem-validation-errors","title":"Problem: Validation errors","text":"<pre><code>ValidationError: Invalid route path: &lt;script&gt;alert('xss')&lt;/script&gt;\n</code></pre> <p>Solutions: 1. Use safe route paths: <pre><code># \u274c Dangerous\n@openapi(route=\"&lt;script&gt;alert('xss')&lt;/script&gt;\")\n\n# \u2705 Safe\n@openapi(route=\"/api/users\")\n</code></pre></p> <ol> <li>Check parameter validation: <pre><code># \u274c Invalid parameters\n@openapi(parameters=\"not_a_list\")\n\n# \u2705 Valid parameters\n@openapi(parameters=[\n    {\"name\": \"id\", \"in\": \"path\", \"required\": True, \"schema\": {\"type\": \"integer\"}}\n])\n</code></pre></li> </ol>"},{"location":"TROUBLESHOOTING/#3-openapi-generation-issues","title":"3. OpenAPI Generation Issues","text":""},{"location":"TROUBLESHOOTING/#problem-empty-openapi-spec","title":"Problem: Empty OpenAPI spec","text":"<pre><code>{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\"title\": \"API\", \"version\": \"1.0.0\"},\n  \"paths\": {}\n}\n</code></pre> <p>Solutions: 1. Check function registration: <pre><code>from azure_functions_openapi.decorator import get_openapi_registry\n\nregistry = get_openapi_registry()\nif not registry:\n    print(\"No functions registered with @openapi decorator\")\n</code></pre></p> <ol> <li>Verify decorator usage: <pre><code># Make sure you're using the decorator correctly\n@openapi(summary=\"Test function\")\ndef test_function(req):\n    return func.HttpResponse(\"OK\")\n</code></pre></li> </ol>"},{"location":"TROUBLESHOOTING/#problem-schema-generation-errors","title":"Problem: Schema generation errors","text":"<pre><code>OpenAPIError: Failed to generate OpenAPI specification\n</code></pre> <p>Solutions: 1. Check Pydantic models: <pre><code># \u274c Invalid model\nclass InvalidModel:\n    def __init__(self):\n        self.name = \"test\"\n\n# \u2705 Valid Pydantic model\nfrom pydantic import BaseModel\n\nclass ValidModel(BaseModel):\n    name: str\n</code></pre></p> <ol> <li>Handle model errors gracefully: <pre><code>try:\n    spec = generate_openapi_spec()\nexcept OpenAPIError as e:\n    print(f\"OpenAPI generation failed: {e}\")\n    # Check the error details\n    print(f\"Error details: {e.details}\")\n</code></pre></li> </ol>"},{"location":"TROUBLESHOOTING/#4-swagger-ui-issues","title":"4. Swagger UI Issues","text":""},{"location":"TROUBLESHOOTING/#problem-swagger-ui-not-loading","title":"Problem: Swagger UI not loading","text":"<p>Solutions: 1. Check route registration: <pre><code>@app.route(route=\"docs\", auth_level=func.AuthLevel.ANONYMOUS)\ndef swagger_ui(req):\n    return render_swagger_ui()\n</code></pre></p> <ol> <li> <p>Verify OpenAPI JSON endpoint: <pre><code>@app.route(route=\"openapi.json\", auth_level=func.AuthLevel.ANONYMOUS)\ndef openapi_json(req):\n    return func.HttpResponse(get_openapi_json(), mimetype=\"application/json\")\n</code></pre></p> </li> <li> <p>Check browser console for errors:</p> </li> <li>Open browser developer tools</li> <li>Check for JavaScript errors</li> <li>Verify network requests to <code>/api/openapi.json</code></li> </ol>"},{"location":"TROUBLESHOOTING/#problem-csp-content-security-policy-errors","title":"Problem: CSP (Content Security Policy) errors","text":"<pre><code>Refused to load the script because it violates the following Content Security Policy directive\n</code></pre> <p>Solutions: 1. Use custom CSP policy: <pre><code>custom_csp = \"default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net\"\nreturn render_swagger_ui(custom_csp=custom_csp)\n</code></pre></p> <ol> <li>Disable CSP for development: <pre><code># For development only\ncustom_csp = \"default-src 'self' 'unsafe-inline' 'unsafe-eval'\"\nreturn render_swagger_ui(custom_csp=custom_csp)\n</code></pre></li> </ol>"},{"location":"TROUBLESHOOTING/#5-performance-issues","title":"5. Performance Issues","text":""},{"location":"TROUBLESHOOTING/#problem-slow-openapi-generation","title":"Problem: Slow OpenAPI generation","text":"<p>Solutions: 1. Enable caching: <pre><code># Caching is enabled by default\n# Check cache statistics\nfrom azure_functions_openapi.cache import get_cache_stats\n\nstats = get_cache_stats()\nprint(f\"Cache hit rate: {stats}\")\n</code></pre></p> <ol> <li> <p>Optimize Pydantic models: <pre><code># Use simple models for better performance\nclass SimpleModel(BaseModel):\n    name: str\n    age: int\n\n# Avoid complex nested models if possible\n</code></pre></p> </li> <li> <p>Clear cache if needed: <pre><code>from azure_functions_openapi.cache import clear_all_cache\n\n# Clear cache (use sparingly)\nclear_all_cache()\n</code></pre></p> </li> </ol>"},{"location":"TROUBLESHOOTING/#problem-memory-usage-issues","title":"Problem: Memory usage issues","text":"<p>Solutions: 1. Monitor cache size: <pre><code>from azure_functions_openapi.cache import get_cache_manager\n\ncache = get_cache_manager()\nstats = cache.get_stats()\nprint(f\"Cache entries: {stats['total_entries']}\")\n</code></pre></p> <ol> <li>Configure cache limits: <pre><code># Set smaller cache size\ncache = get_cache_manager()\ncache._max_response_times = 100  # Reduce from default 1000\n</code></pre></li> </ol>"},{"location":"TROUBLESHOOTING/#6-cli-tool-issues","title":"6. CLI Tool Issues","text":""},{"location":"TROUBLESHOOTING/#problem-cli-command-not-found","title":"Problem: CLI command not found","text":"<pre><code>azure-functions-openapi: command not found\n</code></pre> <p>Solutions: 1. Reinstall the package: <pre><code>pip install --upgrade azure-functions-openapi\n</code></pre></p> <ol> <li> <p>Check installation: <pre><code>pip show azure-functions-openapi\n</code></pre></p> </li> <li> <p>Use Python module syntax: <pre><code>python -m azure_functions_openapi.cli --help\n</code></pre></p> </li> </ol>"},{"location":"TROUBLESHOOTING/#problem-cli-validation-errors","title":"Problem: CLI validation errors","text":"<pre><code>azure-functions-openapi validate openapi.json\nValidation errors found:\n  - Missing required field: openapi\n</code></pre> <p>Solutions: 1. Check OpenAPI spec format: <pre><code>{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API\",\n    \"version\": \"1.0.0\"\n  },\n  \"paths\": {}\n}\n</code></pre></p> <ol> <li>Use correct file format: <pre><code># For JSON files\nazure-functions-openapi validate spec.json\n\n# For YAML files\nazure-functions-openapi validate spec.yaml --format yaml\n</code></pre></li> </ol>"},{"location":"TROUBLESHOOTING/#debugging-techniques","title":"\ud83d\udd0d Debugging Techniques","text":""},{"location":"TROUBLESHOOTING/#1-enable-debug-logging","title":"1. Enable Debug Logging","text":"<pre><code>import logging\n\n# Enable debug logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger('azure_functions_openapi')\nlogger.setLevel(logging.DEBUG)\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-check-registry-state","title":"2. Check Registry State","text":"<pre><code>from azure_functions_openapi.decorator import get_openapi_registry\n\nregistry = get_openapi_registry()\nprint(\"Registered functions:\")\nfor func_name, metadata in registry.items():\n    print(f\"  {func_name}: {metadata}\")\n</code></pre>"},{"location":"TROUBLESHOOTING/#3-test-openapi-generation","title":"3. Test OpenAPI Generation","text":"<pre><code>from azure_functions_openapi.openapi import generate_openapi_spec\n\ntry:\n    spec = generate_openapi_spec()\n    print(\"OpenAPI spec generated successfully\")\n    print(f\"Paths: {list(spec.get('paths', {}).keys())}\")\nexcept Exception as e:\n    print(f\"OpenAPI generation failed: {e}\")\n    import traceback\n    traceback.print_exc()\n</code></pre>"},{"location":"TROUBLESHOOTING/#4-monitor-performance","title":"4. Monitor Performance","text":"<pre><code>from azure_functions_openapi.monitoring import get_performance_monitor\n\nmonitor = get_performance_monitor()\nstats = monitor.get_response_time_stats()\nprint(f\"Response time stats: {stats}\")\n\nthroughput = monitor.get_throughput_stats()\nprint(f\"Throughput: {throughput}\")\n</code></pre>"},{"location":"TROUBLESHOOTING/#5-check-health-status","title":"5. Check Health Status","text":"<pre><code>from azure_functions_openapi.monitoring import run_all_health_checks\n\nhealth = run_all_health_checks()\nprint(f\"Health status: {health['overall_status']}\")\nfor check_name, check_result in health['checks'].items():\n    print(f\"  {check_name}: {check_result['status']}\")\n</code></pre>"},{"location":"TROUBLESHOOTING/#development-tools","title":"\ud83d\udee0\ufe0f Development Tools","text":""},{"location":"TROUBLESHOOTING/#1-use-make-commands","title":"1. Use Make Commands","text":"<pre><code># Run tests\nmake test\n\n# Check code quality\nmake check\n\n# Run all checks\nmake check-all\n\n# Format code\nmake format\n</code></pre>"},{"location":"TROUBLESHOOTING/#2-use-cli-for-testing","title":"2. Use CLI for Testing","text":"<pre><code># Generate OpenAPI spec\nazure-functions-openapi generate --title \"Test API\" --version \"1.0.0\"\n\n# Check health\nazure-functions-openapi health\n\n# Get metrics\nazure-functions-openapi metrics\n</code></pre>"},{"location":"TROUBLESHOOTING/#3-use-development-mode","title":"3. Use Development Mode","text":"<pre><code># Enable development mode for more detailed errors\nimport os\nos.environ['AZURE_FUNCTIONS_OPENAPI_DEBUG'] = '1'\n</code></pre>"},{"location":"TROUBLESHOOTING/#getting-help","title":"\ud83d\udcde Getting Help","text":""},{"location":"TROUBLESHOOTING/#1-check-documentation","title":"1. Check Documentation","text":"<ul> <li>API Reference</li> <li>Security Guide</li> <li>Performance Guide</li> <li>CLI Guide</li> </ul>"},{"location":"TROUBLESHOOTING/#2-enable-verbose-logging","title":"2. Enable Verbose Logging","text":"<pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"TROUBLESHOOTING/#3-report-issues","title":"3. Report Issues","text":"<p>When reporting issues, include:</p> <ol> <li>Python version: <code>python --version</code></li> <li>Package version: <code>pip show azure-functions-openapi</code></li> <li>Error traceback: Full stack trace</li> <li>Code example: Minimal reproducible example</li> <li>Environment: OS, Azure Functions version, etc.</li> </ol>"},{"location":"TROUBLESHOOTING/#4-community-support","title":"4. Community Support","text":"<ul> <li>GitHub Issues</li> <li>GitHub Discussions</li> </ul>"},{"location":"TROUBLESHOOTING/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"TROUBLESHOOTING/#environment-variables","title":"Environment Variables","text":"<pre><code># Debug mode\nexport AZURE_FUNCTIONS_OPENAPI_DEBUG=1\n\n# Cache TTL (seconds)\nexport AZURE_FUNCTIONS_OPENAPI_CACHE_TTL=300\n\n# Log level\nexport AZURE_FUNCTIONS_OPENAPI_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"TROUBLESHOOTING/#configuration-file","title":"Configuration File","text":"<p>Create <code>azure_functions_openapi_config.json</code>:</p> <pre><code>{\n  \"debug\": true,\n  \"cache_ttl\": 300,\n  \"log_level\": \"DEBUG\",\n  \"security\": {\n    \"csp_enabled\": true,\n    \"input_validation\": true\n  }\n}\n</code></pre>"},{"location":"api/","title":"API Reference","text":"<p>This document provides comprehensive API reference for the azure-functions-openapi library.</p>"},{"location":"api/#core-components","title":"Core Components","text":""},{"location":"api/#openapi-decorator","title":"<code>@openapi</code> Decorator","text":"<p>The <code>@openapi</code> decorator attaches OpenAPI metadata to an Azure Function route. This metadata is collected to generate the OpenAPI spec using <code>get_openapi_json()</code> and <code>get_openapi_yaml()</code>.</p>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The library provides comprehensive error handling with standardized error responses:</p> <pre><code>from azure_functions_openapi.errors import (\n    APIError, ValidationError, NotFoundError, OpenAPIError,\n    create_error_response, handle_exception\n)\n</code></pre>"},{"location":"api/#caching-system","title":"Caching System","text":"<p>High-performance caching with TTL and LRU eviction:</p> <pre><code>from azure_functions_openapi.cache import (\n    cached, get_cache_manager, invalidate_cache, clear_all_cache\n)\n</code></pre>"},{"location":"api/#monitoring-health-checks","title":"Monitoring &amp; Health Checks","text":"<p>Built-in monitoring and health check capabilities:</p> <pre><code>from azure_functions_openapi.monitoring import (\n    monitor_performance, log_request, run_health_check\n)\nfrom azure_functions_openapi.server_info import get_server_info_dict\n</code></pre>"},{"location":"api/#parameters","title":"Parameters","text":"Name Type Description summary str Short summary shown in Swagger UI description str Long description in Markdown request_model BaseModel Pydantic model for request body (auto schema) request_body dict Manual schema for request body (if not using a model) response_model BaseModel Pydantic model for response body (200 by default) response dict Custom response object with status codes and examples tags List[str] Group endpoints under tags in Swagger UI operation_id str Unique identifier for the operation route str Optional override for the HTTP path in spec method str Optional override for the HTTP method in spec parameters list Query, path, header, or cookie parameters"},{"location":"api/#complete-example-get","title":"Complete Example (GET)","text":"<pre><code>@openapi(\n    summary=\"Get a todo by ID\",\n    description=\"\"\"\nRetrieve a single todo item by its ID, passed via query string.\n\nSupports optional header `X-Request-ID` for tracing.\n\"\"\",\n    tags=[\"Todos\"],\n    operation_id=\"getTodo\",\n    route=\"/api/get_todo\",\n    method=\"get\",\n    parameters=[\n        {\n            \"name\": \"id\",\n            \"in\": \"query\",\n            \"required\": True,\n            \"description\": \"ID of the todo item\",\n            \"schema\": {\"type\": \"integer\"}\n        },\n        {\n            \"name\": \"X-Request-ID\",\n            \"in\": \"header\",\n            \"required\": False,\n            \"description\": \"Optional request ID for logging\",\n            \"schema\": {\"type\": \"string\"}\n        }\n    ],\n    request_model=None,\n    request_body=None,\n    response_model=TodoResponse,\n    response={\n        200: {\"description\": \"Todo item returned\"},\n        400: {\"description\": \"Invalid ID\"},\n        404: {\"description\": \"Todo not found\"}\n    }\n)\n</code></pre> <p>This example demonstrates: - <code>query</code> parameter for the <code>id</code> - <code>header</code> parameter for an optional custom header - <code>response_model</code> for typed 200 response - <code>response</code> for full control over status codes</p>"},{"location":"api/#notes","title":"Notes","text":"<ul> <li><code>parameters</code> follow the OpenAPI spec format and support <code>query</code>, <code>path</code>, <code>header</code>, and (planned) <code>cookie</code>.</li> <li>You can mix <code>response_model</code> with manual <code>response</code> for extended behavior.</li> <li>All metadata is stored and rendered dynamically at runtime via the registry.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#010-initial-release","title":"[0.1.0] - Initial Release","text":"<ul> <li><code>@openapi</code> decorator</li> <li>OpenAPI JSON/YAML route generators</li> <li>Swagger UI support</li> <li>Pydantic model integration</li> </ul>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>We welcome contributions to the <code>azure-functions-openapi</code> project!</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the Repository</li> <li> <p>Create a New Branch <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Write Code &amp; Tests</p> </li> <li>Run <code>make test</code> to ensure everything passes.</li> <li> <p>Follow code style using <code>black</code>, <code>ruff</code>, and <code>mypy</code>.</p> </li> <li> <p>Commit Your Changes <pre><code>git commit -m \"feat: describe your feature\"\n</code></pre></p> </li> <li> <p>Push and Create a Pull Request</p> </li> </ol>"},{"location":"contributing/#project-commands","title":"Project Commands","text":"<pre><code>make format      # Format code with black\nmake lint        # Lint with ruff\nmake typecheck   # Type check with mypy\nmake test        # Run tests\n</code></pre>"},{"location":"contributing/#commit-message-guidelines","title":"Commit Message Guidelines","text":"<p>We follow the Conventional Commits specification.</p>"},{"location":"contributing/#prefix-types","title":"Prefix Types","text":"Type Description <code>feat:</code> New feature <code>fix:</code> Bug fix <code>docs:</code> Documentation changes only <code>style:</code> Code formatting, no logic changes <code>refactor:</code> Code refactoring without behavior changes <code>test:</code> Adding or modifying tests <code>chore:</code> Tooling, dependencies, CI/CD, versioning"},{"location":"contributing/#examples","title":"Examples","text":"<pre><code>git commit -m \"feat: add OpenAPI 3.1 support\"\ngit commit -m \"fix: handle empty request body gracefully\"\ngit commit -m \"docs: improve quickstart documentation\"\ngit commit -m \"refactor: extract schema builder logic\"\ngit commit -m \"chore: update dev dependencies\"\n</code></pre> <p>\u2705 Use imperative present tense (\"add\", not \"added\"). \u2705 Keep the message concise and relevant to the change.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be respectful and inclusive. See the Contributor Covenant for details.</p>"},{"location":"development/","title":"Development Guide","text":"<p>This document provides guidance for setting up the development environment for the <code>azure-functions-openapi</code> project.</p>"},{"location":"development/#python-version","title":"Python Version","text":"<ul> <li>This project supports Python 3.9+.</li> <li>All development and formatting tools are configured accordingly via Hatch.</li> </ul>"},{"location":"development/#local-setup","title":"Local Setup","text":"<p>Clone and set up the project:</p> <pre><code>git clone https://github.com/yeongseon/azure-functions-openapi.git\ncd azure-functions-openapi\n\n# Install Hatch (if not installed)\npip install hatch\n\n# Create environment and install dev dependencies\nmake install\n</code></pre> <p>Install pre-commit hooks:</p> <pre><code>make precommit-install\n</code></pre>"},{"location":"development/#pre-commit-hooks-overview","title":"Pre-commit Hooks Overview","text":"<p>This project uses pre-commit to ensure consistent code quality across formatting, linting, typing, and security.</p> Tool Version Purpose black 23.11.0 Auto-code formatter ruff v0.4.4 Linter + import sorter + fixer mypy v1.15.0 Static type checker bandit 1.7.7 Security checker on <code>src/</code> only"},{"location":"development/#bandit-configuration","title":"Bandit Configuration","text":"<ul> <li>Only scans <code>src/</code> directory</li> <li>Skips <code>tests/</code></li> <li>Uses <code>pass_filenames: false</code> for full-directory analysis</li> </ul>"},{"location":"development/#run-hooks-manually","title":"Run Hooks Manually","text":"<pre><code>make precommit\npre-commit clean\n</code></pre>"},{"location":"development/#development-commands","title":"Development Commands","text":"<p>Makefile provides shortcuts for common development tasks:</p> <pre><code>make install           # Set up Hatch environment and dev dependencies\nmake format            # Format code (ruff + black)\nmake lint              # Run linter (ruff + mypy)\nmake typecheck         # Run mypy type checking\nmake test              # Run pytest\nmake cov               # Run tests with coverage\nmake check             # Run lint + typecheck\nmake check-all         # Run lint + typecheck + test + coverage\nmake docs              # Start MkDocs dev server\nmake build             # Build package\nmake release-patch     # Version bump + tag + push (patch)\nmake precommit         # Run all pre-commit hooks\nmake precommit-install # Install pre-commit hooks\n</code></pre>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>azure-functions-openapi/\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 examples/\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 development.md\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"development/#tips","title":"Tips","text":"<ul> <li>Ensure you're using Python 3.9+.</li> <li>Use <code>make check-all</code> before committing to validate your changes.</li> <li>Prefer <code>make</code> commands to ensure consistent dev experience across platforms.</li> </ul>"},{"location":"docs/","title":"Documentation Site with MkDocs","text":"<p>This project uses MkDocs and the Material for MkDocs theme to build and deploy its documentation site.</p>"},{"location":"docs/#requirements","title":"Requirements","text":"<p>To build and serve the documentation locally, install the following:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre>"},{"location":"docs/#local-preview","title":"Local Preview","text":"<p>To run the documentation site locally:</p> <pre><code>mkdocs serve\n</code></pre> <p>Visit <code>http://localhost:8000</code> in your browser to preview the documentation.</p>"},{"location":"docs/#deployment","title":"Deployment","text":"<p>Documentation is deployed to GitHub Pages automatically using GitHub Actions.</p> <p>The workflow file is located at:</p> <pre><code>.github/workflows/deploy.yml\n</code></pre>"},{"location":"docs/#deployment-trigger","title":"Deployment Trigger","text":"<p>The workflow runs on every push to the <code>main</code> branch and executes the following command:</p> <pre><code>mkdocs gh-deploy --force\n</code></pre> <p>This publishes the site to the <code>gh-pages</code> branch.</p>"},{"location":"docs/#configuration","title":"Configuration","text":"<p>The documentation structure and appearance are defined in <code>mkdocs.yml</code>. It includes:</p> <ul> <li>Site name and theme</li> <li>Navigation menu</li> <li>Markdown extensions</li> <li>Repository and edit links</li> </ul> <p>You can customize these settings as needed.</p>"},{"location":"docs/#tips","title":"Tips","text":"<ul> <li>Always run <code>mkdocs serve</code> before committing to validate changes.</li> <li>Use <code>mkdocs build</code> to generate the static site without serving.</li> <li>Ensure all Markdown files are included in navigation in <code>mkdocs.yml</code>.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This project supports Python-based Azure Functions using the Programming Model v2.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.9+ (3.9\u20133.12 tested)</li> <li>Azure Functions Core Tools</li> <li>Azure Functions Python Programming Model v2</li> </ul> <p>This library is not compatible with the legacy v1 model.</p>"},{"location":"installation/#installation_1","title":"Installation","text":"<p>Install the package via pip:</p> <pre><code>pip install azure-functions-openapi\n</code></pre> <p>Then ensure your <code>requirements.txt</code> includes:</p> <pre><code>azure-functions\nazure-functions-openapi\n</code></pre> <p>If you're developing locally:</p> <pre><code>pip install -e .[dev]\n</code></pre>"},{"location":"usage/","title":"Usage Guide: azure-functions-openapi","text":"<p>This guide walks you through documenting Python Azure Functions using OpenAPI (Swagger) via <code>azure-functions-openapi</code>. It focuses on practical usage based on a full-featured Todo API example.</p> <p>\ud83d\udd17 For installation and setup, see the Installation Guide. \ud83d\udd0d For full API reference of the decorator, see the <code>@openapi</code> API Reference.</p>"},{"location":"usage/#openapi-decorator","title":"@openapi Decorator","text":"<p>Use the <code>@openapi</code> decorator to attach OpenAPI metadata to each function. This metadata is used at runtime to generate:</p> <ul> <li><code>/openapi.json</code>: OpenAPI schema in JSON format</li> <li><code>/openapi.yaml</code>: (optional) YAML version of the schema</li> <li><code>/docs</code>: Swagger UI</li> </ul> <p>See the full list of supported parameters in the API Reference.</p>"},{"location":"usage/#example","title":"Example","text":"<pre><code>@openapi(\n    summary=\"Create a new todo\",\n    description=\"Add a new todo item with a title.\",\n    tags=[\"Todos\"],\n    operation_id=\"createTodo\",\n    route=\"/api/create_todo\",\n    method=\"post\",\n    request_model=TodoCreateRequest,\n    response_model=TodoResponse,\n    response={\n        201: {\"description\": \"Todo created\"},\n        400: {\"description\": \"Invalid request\"}\n    }\n)\n</code></pre>"},{"location":"usage/#pydantic-models","title":"Pydantic Models","text":"<p>Define request and response models using Pydantic v2. These models are converted into OpenAPI-compatible schemas and embedded under <code>components.schemas</code> in the spec.</p> <pre><code>class TodoCreateRequest(BaseModel):\n    title: str\n\nclass TodoResponse(BaseModel):\n    id: int\n    title: str\n    done: bool\n</code></pre> <p>\u2705 Make sure your project uses Pydantic v2. Pydantic v1 is not supported.</p>"},{"location":"usage/#parameters-query-path-header","title":"Parameters (Query / Path / Header)","text":"<p>Use the <code>parameters</code> argument to define additional request parameters such as query strings, path variables, or headers.</p> <pre><code>parameters=[\n    {\n        \"name\": \"id\",\n        \"in\": \"query\",  # or: path, header\n        \"required\": True,\n        \"description\": \"Todo item ID\",\n        \"schema\": {\"type\": \"integer\"}\n    }\n]\n</code></pre> <p>Each parameter follows the OpenAPI 3.0 format.</p>"},{"location":"usage/#response-schema-options","title":"Response Schema Options","text":"<p>There are two ways to define responses:</p> <ol> <li> <p><code>response_model=TodoResponse</code>    Automatically creates schema for <code>200</code> status code</p> </li> <li> <p><code>response={...}</code>    Manually define multiple response codes and content types</p> </li> </ol> <p>You can use both together to document a default response and special cases (e.g., 400, 404).</p>"},{"location":"usage/#http-methods-routing","title":"HTTP Methods &amp; Routing","text":"<p>To correctly reflect your API in the OpenAPI spec, set both:</p> <ul> <li><code>route=\"...\"</code> \u2192 path exposed in spec</li> <li><code>method=\"...\"</code> \u2192 HTTP verb (GET, POST, PUT, DELETE, etc.)</li> </ul> <p>Also ensure your Azure Function is decorated with the corresponding route:</p> <pre><code>@app.route(route=\"create_todo\", methods=[\"POST\"])\n</code></pre>"},{"location":"usage/#exposing-openapi-docs","title":"Exposing OpenAPI Docs","text":"<p>These endpoints must be manually added to your <code>FunctionApp</code>:</p> <pre><code>@app.route(route=\"openapi.json\")\ndef openapi_spec(req: func.HttpRequest) -&gt; func.HttpResponse:\n    return func.HttpResponse(get_openapi_json())\n\n@app.route(route=\"docs\")\ndef swagger_ui(req: func.HttpRequest) -&gt; func.HttpResponse:\n    return render_swagger_ui()\n</code></pre> <ul> <li><code>/openapi.yaml</code> also available if you install <code>PyYAML</code></li> </ul>"},{"location":"usage/#json-yaml-output","title":"JSON &amp; YAML Output","text":"Route Format Description <code>/openapi.json</code> JSON Full OpenAPI schema for API consumers <code>/openapi.yaml</code> YAML (Optional) Easier to read and edit manually <code>/docs</code> Swagger UI Developer-friendly interactive UI"},{"location":"usage/#end-to-end-example-todo-api","title":"End-to-End Example: Todo API","text":"<p>The Todo example implements the following operations:</p> Function Method Route Summary <code>create_todo</code> POST <code>/api/create_todo</code> Create a new todo <code>list_todos</code> GET <code>/api/list_todos</code> List all todos <code>get_todo</code> GET <code>/api/get_todo</code> Get todo by ID <code>update_todo</code> PUT <code>/api/update_todo</code> Update todo <code>delete_todo</code> DELETE <code>/api/delete_todo</code> Delete todo <p>Each function demonstrates:</p> <ul> <li>How to use <code>@openapi</code> to define documentation metadata</li> <li>Parameterized endpoints (<code>query</code>, <code>header</code>)</li> <li>Typed request/response models with Pydantic</li> <li>Swagger UI output for all routes</li> </ul> <p>You can import the generated spec into tools like:</p> <ul> <li>Postman</li> <li>SwaggerHub</li> <li>Azure API Management</li> </ul>"},{"location":"usage/#happy-documenting","title":"Happy documenting!","text":""},{"location":"usage/#function-endpoints","title":"Function Endpoints","text":"<p>Once the app is running (<code>func start</code>), the following routes will be available:</p> Function Method Route Description <code>create_todo</code> POST http://localhost:7071/api/create_todo Create a new todo <code>delete_todo</code> DELETE http://localhost:7071/api/delete_todo Delete a todo by ID <code>get_todo</code> GET http://localhost:7071/api/get_todo Get todo by ID <code>list_todos</code> GET http://localhost:7071/api/list_todos List all todos <code>update_todo</code> PUT http://localhost:7071/api/update_todo Update a todo <code>openapi_spec</code> GET http://localhost:7071/api/openapi.json OpenAPI JSON spec <code>openapi_yaml_spec</code> GET http://localhost:7071/api/openapi.yaml OpenAPI YAML spec <code>swagger_ui</code> GET http://localhost:7071/api/docs Swagger UI"},{"location":"usage/#sample-openapi-output-json","title":"Sample OpenAPI Output (JSON)","text":"<p>Example snippet from <code>/openapi.json</code>:</p> <pre><code>{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"API\",\n    \"version\": \"1.0.0\"\n  },\n  \"paths\": {\n    \"/api/create_todo\": {\n      \"post\": {\n        \"summary\": \"Create a new todo\",\n        \"description\": \"Add a new todo item with a title.\",\n        \"operationId\": \"createTodo\",\n        \"tags\": [\"Todos\"],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"title\": \"TodoCreateRequest\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"title\": { \"type\": \"string\" }\n                },\n                \"required\": [\"title\"]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": { \"description\": \"Todo created successfully\" },\n          \"400\": { \"description\": \"Invalid request\" },\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"title\": \"TodoResponse\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": { \"type\": \"integer\" },\n                    \"title\": { \"type\": \"string\" },\n                    \"done\": { \"type\": \"boolean\" }\n                  },\n                  \"required\": [\"id\", \"title\", \"done\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>This output can be imported into tools like SwaggerHub, Postman, or Azure API Management.</p>"},{"location":"usage/#swagger-ui-preview","title":"Swagger UI Preview","text":"<p>Below is a preview of the automatically generated Swagger UI:</p> <p></p>"},{"location":"examples/hello_openapi/","title":"Hello OpenAPI Example","text":"<p>The <code>hello_openapi</code> example demonstrates the most minimal usage of the <code>@openapi</code> decorator.</p>"},{"location":"examples/hello_openapi/#file","title":"File","text":"<ul> <li><code>examples/hello_openapi/function_app.py</code></li> </ul>"},{"location":"examples/hello_openapi/#key-concepts","title":"Key Concepts","text":"<ul> <li>One route</li> <li>No request model</li> <li>Returns a simple greeting response</li> </ul>"},{"location":"examples/hello_openapi/#sample","title":"Sample","text":"<pre><code>@app.route(route=\"hello\", ...)\n@openapi(summary=\"Hello\", description=\"Returns a greeting.\", response_model=HelloResponse)\ndef hello(req: HttpRequest) -&gt; HttpResponse:\n    ...\n</code></pre>"},{"location":"examples/todo_crud_api/","title":"Todo API Example","text":"<p>The <code>todo_crud_api</code> example shows how to build a basic Todo API using:</p> <ul> <li>Azure Functions (v2 model)</li> <li><code>@openapi</code> decorators</li> <li>Pydantic models</li> </ul>"},{"location":"examples/todo_crud_api/#features","title":"Features","text":"<ul> <li><code>POST /create_todo</code> to add a new item</li> <li><code>GET /list_todos</code> to fetch all items</li> </ul>"},{"location":"examples/todo_crud_api/#directory","title":"Directory","text":"<ul> <li><code>examples/todo_crud_api/function_app.py</code></li> <li><code>examples/todo_crud_api/host.json</code></li> <li><code>examples/todo_crud_api/local.settings.json</code></li> </ul>"}]}